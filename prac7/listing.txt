  LL1 warning in RelExp: "sqrt" is the start of several alternatives
  LL1 warning in RelExp: "sqr" is the start of several alternatives
  LL1 warning in AddExp: "sqrt" is the start of several alternatives
  LL1 warning in AddExp: "sqr" is the start of several alternatives
  LL1 warning in MultExp: "sqrt" is the start of several alternatives
  LL1 warning in MultExp: "sqr" is the start of several alternatives
  LL1 warning in MultExp: "sqrt" is the start & successor of a deletable structure
  LL1 warning in MultExp: "sqr" is the start & successor of a deletable structure
  LL1 warning in Factor: "+" is the start of several alternatives
  LL1 warning in Factor: "+" is the start of several alternatives
  LL1 warning in Factor: "-" is the start of several alternatives
  LL1 warning in Factor: "-" is the start of several alternatives
  LL1 warning in Factor: "-" is the start of several alternatives

   1 import java.util.*;
   2 import library.*;
   3 //g21v4969 Jacobus
   4 //g21w7943 William
   5 //g20m1710 Kaizer 
   6 COMPILER Parva $NC
   7 /* Parva level 1 grammar  - Coco/R for Java
   8    P.D. Terry, Rhodes University; Modified by KL Bradshaw, 2024
   9    Java operator precedences with short circuit evaluation
  10    Includes character type
  11    No functions and no optimization */
  12 
  13   public static boolean
  14     debug    = false;
  15     listcode = false;
  16 
  17 
  18   static final boolean
  19     known = true;
  20 
  21   // This next method might better be located in the code generator.  Traditionally
  22   // it has been left in the ATG file, but that might change in future years
  23   //
  24   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab
  25   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  26   // to know this!
  27 
  28   static String unescape(String s) {
  29   /* Replaces escape sequences in s by their Unicode values */
  30     StringBuilder buf = new StringBuilder();
  31     int i = 0;
  32     while (i < s.length()) {
  33       if (s.charAt(i) == '\\') {
  34         switch (s.charAt(i+1)) {
  35           case '\\': buf.append('\\'); break;
  36           case '\'': buf.append('\''); break;
  37           case '\"': buf.append('\"'); break;
  38           case  'r': buf.append('\r'); break;
  39           case  'n': buf.append('\n'); break;
  40           case  't': buf.append('\t'); break;
  41           case  'b': buf.append('\b'); break;
  42           case  'f': buf.append('\f'); break;
  43           default:   buf.append(s.charAt(i+1)); break;
  44         }
  45         i += 2;
  46       }
  47       else {
  48         buf.append(s.charAt(i));
  49         i++;
  50       }
  51     }
  52     return buf.toString();
  53   } // unescape
  54 
  55  static boolean isArith(int type) {
  56     return type == Types.intType || type == Types.charType || type == Types.noType;
  57   } // isArith
  58 
  59   static boolean isBool(int type) {
  60     return type == Types.boolType || type == Types.noType;
  61   } // isBool
  62 
  63   static boolean isArray(int type) {
  64     return (type % 2) == 1;
  65   } // isArray
  66 
  67   static boolean compatible(int typeOne, int typeTwo) {
  68   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  69     return    typeOne == typeTwo
  70            || isArith(typeOne) && isArith(typeTwo)
  71            || typeOne == Types.noType || typeTwo == Types.noType
  72            || isArray(typeOne) && typeTwo == Types.nullType
  73            || isArray(typeTwo) && typeOne == Types.nullType;
  74   } // compatible
  75 
  76   static boolean assignable(int typeOne, int typeTwo) {
  77   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  78     return    typeOne == typeTwo
  79            || typeOne == Types.intType && typeTwo == Types.charType
  80            || typeOne == Types.noType || typeTwo == Types.noType
  81            || isArray(typeOne) && typeTwo == Types.nullType;
  82   } // assignable
  83 
  84 /* -------------------------------------------------------------------------- */
  85 
  86 CHARACTERS
  87   lf         = CHR(10) .
  88   backslash  = CHR(92) .
  89   control    = CHR(0) .. CHR(31) .
  90   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  91   digit      = "0123456789" .
  92   stringCh   = ANY - '"' - control - backslash .
  93   charCh     = ANY - "'" - control - backslash .
  94   printable  = ANY - control .
  95 
  96 TOKENS
  97   identifier = letter { { "_" } (letter | digit) } .
  98   number     = digit { digit } .
  99   stringLit  = '"' { stringCh | backslash printable } '"' .
 100   charLit    = "'" ( charCh   | backslash printable ) "'" .
 101 
 102 PRAGMAS // added needed pragmas, some pragmas are depended on if debug is on or not
 103   DebugOn     = "$D+" .                      (. debug     = true; .)
 104   DebugOff    = "$D-" .                      (. debug     = false; .)
 105 //Task1
 106   HeapDump    = "$HD" .                      (. if (debug) {CodeGen.heap()}; .)
 107   StackDump   = "$SD" .                      (. if (debug) {CodeGen.stack()}; .)
 108   SymbolTable = "$ST" .                      (. if (debug) {Table.printable()}; .)
 109   CodOn       = "$C+" .                      (. listCode = true; .)
 110   CodOn       = "$C-" .                      (. listCode = false; .)
 111 //Task2
 112   Warning     = "$W"  .                      (. Parser.Summarize();.)
 113 
 114 COMMENTS FROM "//" TO lf
 115 COMMENTS FROM "/*" TO "*/"
 116 
 117 IGNORE CHR(9) .. CHR(13)
 118 
 119 PRODUCTIONS
 120 
 121   Parva
 122   =  "void"                                  (. Entry program = new Entry(); .)
 123      Ident<out program.name> "(" ")"         (. program.kind = Kinds.Fun;
 124                                                 program.type = Types.voidType;
 125                                                 Table.insert(program);
 126                                                 StackFrame frame = new StackFrame();
 127                                                 Table.openScope();
 128                                                 Label DSPLabel = new Label(known);
 129                                                 CodeGen.openStackFrame(0); .)
 130      WEAK "{" { Statement<frame> }
 131      WEAK "}"                                (. CodeGen.fixDSP(DSPLabel.address(), frame.size);
 132                                                 CodeGen.leaveProgram();
 133                                                 Table.closeScope(); .)
 134   .
 135 
 136   Statement<StackFrame frame>
 137   =  SYNC (   Block<frame>
 138             | ConstDeclarations
 139             | VarDeclarations<frame>
 140             | AssignmentStatement
 141             | IfStatement<frame>
 142             | WhileStatement<frame>
 143             | HaltStatement
 144             | ReturnStatement
 145             | ReadStatement
 146             | WriteStatement
 147             | ";"
 148           )
 149   .
 150 
 151   Block<StackFrame frame>
 152   =                                          (. Table.openScope(); .)
 153      "{" { Statement<frame> }
 154      WEAK "}"                                (. Table.closeScope(); .)
 155   .
 156 
 157   ConstDeclarations
 158   = "const" OneConst { WEAK "," OneConst }
 159     WEAK ";"
 160   .
 161 
 162   OneConst                                   (. Entry constant = new Entry();
 163                                                 ConstRec con; .)
 164   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 165      AssignOp Constant<out con>              (. constant.value = con.value;
 166                                                 constant.type = con.type;
 167                                                 Table.insert(constant); .)
 168   .
 169 
 170   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 171   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 172     | CharConst<out con.value>               (. con.type = Types.charType; .)
 173     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 174     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 175     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 176   .
 177 
 178   VarDeclarations<StackFrame frame>          (. int type; .)
 179   =  Type<out type>
 180      VarList<frame, type>
 181      WEAK ";"
 182   .
 183 
 184   Type<out int type>
 185   =  BasicType<out type>
 186      [ "[]"                                  (. if (type != Types.noType) type++; .)
 187      ]
 188   .
 189 
 190   BasicType<out int type>                    (. type = Types.noType; .)
 191   =   "int"                                  (. type = Types.intType; .)
 192     | "bool"                                 (. type = Types.boolType; .)
 193 	| "char"                                 (. type = Types.charType; .)
 194   .
 195 
 196   VarList<StackFrame frame, int type>
 197   =  OneVar<frame, type>
 198      { WEAK "," OneVar<frame, type> }
 199   .
 200 
 201   OneVar<StackFrame frame, int type>         (. int expType;
 202                                                 Entry var = new Entry(); .)
 203   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 204                                                 var.type = type;
 205                                                 var.offset = frame.size;
 206                                                 frame.size++; .)
 207      [ AssignOp                              (. CodeGen.loadAddress(var); .)
 208        Expression<out expType>               (. if (!assignable(var.type, expType))
 209                                                   SemError("incompatible types in assignment");
 210                                                 CodeGen.assign(var.type); .)
 211      ]                                       (. Table.insert(var); .)
 212   .
 213 
 214   AssignmentStatement
 215                                              (. int expType;
 216                                                 DesType des; .)
 217   = Designator<out des>                      (. if (des.entry.kind != Kinds.Var)
 218                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 219     AssignOp
 220     Expression<out expType>                  (. if (!assignable(des.type, expType))
 221                                                   SemError("incompatible types in assignment");
 222                                                 CodeGen.assign(des.type); .)
 223     WEAK ";"
 224   .
 225 
 226   Designator<out DesType des>                (. String name;
 227                                                 int indexType; .)
 228   =  Ident<out name>                         (. Entry entry = Table.find(name);
 229                                                 if (!entry.declared)
 230                                                   SemError("undeclared identifier");
 231                                                 des = new DesType(entry);
 232                                                 if (entry.kind == Kinds.Var)
 233                                                   CodeGen.loadAddress(entry); .)
 234      [     "["                               (. if (isArray(des.type)) des.type--;
 235                                                 else SemError("unexpected subscript");
 236                                                 if (des.entry.kind != Kinds.Var)
 237                                                   SemError("unexpected subscript");
 238                                                 CodeGen.dereference(); .)
 239               Expression<out indexType>      (. if (!isArith(indexType))
 240                                                   SemError("invalid subscript type");
 241                                                 CodeGen.index(); .)
 242 
 243            "]"
 244      ]
 245   .
 246 
 247   IfStatement<StackFrame frame>
 248                                              (. Label falseLabel = new Label(!known); .)
 249   =  "if" "(" Condition ")"                  (. CodeGen.branchFalse(falseLabel); .)
 250        Statement<frame>                      (. falseLabel.here(); .)
 251   .
 252 //---------------------------------------------------------------------------------------------------------------------------------------------
 253 //Task 2: added annotations if the statement section for the while loop is zero then add the warning
 254   WhileStatement<StackFrame frame>           (. Label loopExit  = new Label(!known);
 255                                                 Label loopStart = new Label(known); .)
 256   =  "while" "(" Condition ")"               (. CodeGen.branchFalse(loopExit); .)
 257      Statement<frame>                        (. if(frame.size == 0) Parser.Warning("Warning: Empty while condition");
 258                                                 CodeGen.branch(loopStart);
 259                                                 loopExit.here(); .)
 260   .
 261 //-----------------------------------------------------------------------------------------------------------------------------------------------
 262  
 263   HaltStatement
 264   =  "halt"                                  (. CodeGen.leaveProgram(); .)
 265      WEAK ";"
 266   .
 267 
 268   ReturnStatement
 269   =  "return"                                (. CodeGen.leaveProgram(); .)
 270      WEAK ";"
 271   .
 272 
 273   ReadStatement
 274   = "read" "(" ReadList")"
 275     WEAK ";"
 276   .
 277 
 278   ReadList
 279   = ReadElement { WEAK "," ReadElement }
 280   .
 281 
 282   ReadElement                                (. String str;
 283                                                 DesType des; .)
 284   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 285     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 286                                                   SemError("wrong kind of identifier");
 287                                                 switch (des.type) {
 288                                                   case Types.intType:
 289                                                   case Types.boolType:
 290 												  case Types.charType:
 291                                                     CodeGen.read(des.type); break;
 292                                                   default:
 293                                                     SemError("cannot read this type"); break;
 294                                                 } .)
 295   .
 296 
 297   WriteStatement
 298   = "write" "(" WriteList ")"
 299     WEAK ";"
 300   .
 301 
 302   WriteList
 303   = WriteElement { WEAK "," WriteElement }
 304   .
 305 
 306   WriteElement                               (. int expType;
 307                                                 String str; .)
 308   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 309     | Expression<out expType>                (. if (!(isArith(expType) || expType == Types.boolType))
 310                                                   SemError("cannot write this type");
 311                                                 switch (expType) {
 312                                                   case Types.intType:
 313                                                   case Types.boolType:
 314 												  case Types.charType:
 315                                                     CodeGen.write(expType); break;
 316                                                   default:
 317                                                     break;
 318                                                 } .)
 319   .
 320 
 321   Condition                                  (. int type; .)
 322   =  Expression<out type>                    (. if (!isBool(type))
 323                                                   SemError("boolean expression needed"); .)
 324   .
 325 
 326   Expression<out int type>                   (. int type2;
 327                                                 Label shortcircuit = new Label(!known); .)
 328   =  AndExp<out type>
 329      { "||"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.or); .)
 330        AndExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 331                                                   SemError("Boolean operands needed");
 332                                                 type = Types.boolType; .)
 333      }                                       (. shortcircuit.here(); .)
 334   .
 335 
 336   AndExp<out int type>                       (. int type2;
 337                                                 Label shortcircuit = new Label(!known); .)
 338   =  EqlExp<out type>
 339      { "&&"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.and); .)
 340        EqlExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 341                                                   SemError("Boolean operands needed");
 342                                                 type = Types.boolType; .)
 343      }                                       (. shortcircuit.here(); .)
 344   .
 345 
 346   EqlExp<out int type>                       (. int type2;
 347                                                 int op; .)
 348   =  RelExp<out type>
 349      { EqualOp<out op>
 350        RelExp<out type2>                     (. if (!compatible(type, type2))
 351                                                   SemError("incomparable operand types");
 352                                                 CodeGen.comparison(op, type);
 353                                                 type = Types.boolType; .)
 354      }
 355   .
 356 
 357   RelExp<out int type>                       (. int type2;
 358                                                 int op; .)
 359   =  AddExp<out type> 
 360     | ("sqrt" "(" AddExp<out type> ")")
 361     | ("sqr" "(" AddExp<out type> ")")
 362      [ RelOp<out op>
 363        AddExp<out type2>                    
 364       | ("sqrt" "(" AddExp<out type2> ")")
 365       | ("sqr" "(" AddExp<out type2> ")")     (. if (!isArith(type) || !isArith(type2))
 366                                                   SemError("incomparable operand types");
 367                                                 CodeGen.comparison(op, type);
 368                                                 type = Types.boolType; .)
 369      ]
 370   .
 371 
 372   AddExp<out int type>                       (. int type2;
 373                                                 int op; .)
 374   =  MultExp<out type>
 375     | ("sqrt" "(" MultExp<out type> ")")
 376     | ("sqr" "(" MultExp<out type> ")")
 377      { AddOp<out op>
 378        MultExp<out type2>                    
 379         | ("sqrt" "(" MultExp<out type> ")")
 380         | ("sqr" "(" MultExp<out type> ")")     (. if (!isArith(type) || !isArith(type2)) {
 381                                                   SemError("arithmetic operands needed");
 382                                                   type = Types.noType;
 383                                                 }
 384                                                 else type = Types.intType;
 385                                                 CodeGen.binaryOp(op); .)
 386      }
 387   .
 388 
 389   MultExp<out int type>                      (. int type2;
 390                                                 int op; .)
 391   =  Factor<out type>
 392     | ("sqrt" "(" Factor<out type> ")")
 393     | ("sqr" "(" Factor<out type> ")")
 394      { MulOp<out op>
 395        Factor<out type2>                     
 396        | ("sqrt" "(" Factor<out type2> ")")
 397        | ("sqr" "(" Factor<out type2> ")")       (. if (!isArith(type) || !isArith(type2)) {
 398                                                   SemError("arithmetic operands needed");
 399                                                   type = Types.noType;
 400                                                 }
 401                                                 else type = Types.intType;
 402                                                 CodeGen.binaryOp(op); .)
 403      }
 404   .
 405 
 406   Factor<out int type>                       (. type = Types.noType; .)
 407   =   Primary<out type>
 408      | "+" Factor<out type>                  
 409      | "+" ("sqrt" "(" Factor<out type> ")")
 410      | "+" ("sqr" "(" Factor<out type> ")")   (. if (!isArith(type)) {
 411                                                   SemError("arithmetic operand needed");
 412                                                   type = Types.noType;
 413                                                 }
 414                                                 else type = Types.intType; .)
 415      | "-" Factor<out type>                  
 416      | "-" Factor<out type>                  
 417      | "-" ("sqrt" "(" Factor<out type> ")")
 418      | "-" ("sqr" "(" Factor<out type> ")")   (. if (!isArith(type)) {
 419                                                   SemError("arithmetic operand needed");
 420                                                   type = Types.noType;
 421                                                 }
 422                                                 else type = Types.intType;
 423                                                 CodeGen.negateInteger(); .)
 424      | "!" Factor<out type>                  (. if (!isBool(type))
 425                                                   SemError("Boolean operand needed");
 426                                                 type = Types.boolType;
 427                                                 CodeGen.negateBoolean(); .)
 428   .
 429 
 430   Primary<out int type>                      (. type = Types.noType;
 431                                                 int size;
 432                                                 DesType des;
 433                                                 ConstRec con; .)
 434   =    Designator<out des>                   (. type = des.type;
 435                                                 switch (des.entry.kind) {
 436                                                   case Kinds.Var:
 437                                                     CodeGen.dereference();
 438                                                     break;
 439                                                   case Kinds.Con:
 440                                                     CodeGen.loadConstant(des.entry.value);
 441                                                     break;
 442                                                   default:
 443                                                     SemError("wrong kind of identifier");
 444                                                     break;
 445                                                 } .)
 446      | Constant<out con>                      (. type = con.type;
 447                                                 CodeGen.loadConstant(con.value); .)
 448      | "new"
 449        (   BasicType<out type>
 450            "[" Expression<out size>          (. if (!isArith(size))
 451                                                   SemError("array size must be integer");
 452                                                 type++; .)
 453            "]"
 454        )                                     (. CodeGen.allocate(); .)
 455 
 456      | "(" Expression<out type> ")"
 457   .
 458 
 459   AddOp<out int op>                          (. op = CodeGen.nop; .)
 460   =    "+"                                   (. op = CodeGen.add; .)
 461      | "-"                                   (. op = CodeGen.sub; .)
 462   .
 463 
 464   MulOp<out int op>                          (. op = CodeGen.nop; .)
 465   =    "*"                                   (. op = CodeGen.mul; .)
 466      | "/"                                   (. op = CodeGen.div; .)
 467      | "%"                                   (. op = CodeGen.rem; .)
 468   .
 469 
 470   EqualOp<out int op>                        (. op = CodeGen.nop; .)
 471   =    "=="                                  (. op = CodeGen.ceq; .)
 472      | "!="                                  (. op = CodeGen.cne; .)
 473   .
 474 
 475   RelOp<out int op>                          (. op = CodeGen.nop; .)
 476   =    "<"                                   (. op = CodeGen.clt; .)
 477      | "<="                                  (. op = CodeGen.cle; .)
 478      | ">"                                   (. op = CodeGen.cgt; .)
 479      | ">="                                  (. op = CodeGen.cge; .)
 480   .
 481 
 482   AssignOp = "=" .
 483 
 484   Ident<out String name>
 485   =  identifier                              (. name = token.val; .)
 486   .
 487 
 488   StringConst<out String str>
 489   =  stringLit                               (. str = token.val;
 490                                                 str = unescape(str.substring(1, str.length() - 1)); .)
 491   .
 492 
 493   CharConst<out int value>
 494   =  charLit                                 (. String str = token.val;
 495                                                 str = unescape(str.substring(1, str.length() - 1));
 496                                                 value = str.charAt(0); .)
 497   .
 498 
 499   IntConst<out int value>
 500   =  number                                  
 501     | ("sqrt" "(" number ")")
 502     | ("sqr" "(" number ")")                  (. try {
 503                                                   value = Integer.parseInt(token.val);
 504                                                 } catch (NumberFormatException e) {
 505                                                   value = 0; SemError("number out of range");
 506                                                 } .)
 507   .
 508 
 509 END Parva.
 510 

0 errors detected
13 warnings detected
